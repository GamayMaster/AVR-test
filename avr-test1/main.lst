
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000092  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000092  00000106  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000005a0  00000000  00000000  00000108  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000cca  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001372  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001384  2**2
                  CONTENTS, READONLY
  6 .debug_info   000004e6  00000000  00000000  000013c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004a3  00000000  00000000  000018a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00001d49  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  00001d63  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 47 00 	jmp	0x8e	; 0x8e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:



int main()
{
    SET_BYTE(DDRA, 0xFF);
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
    SET_BYTE(DDRB, 0x00);
  70:	17 ba       	out	0x17, r1	; 23
    CLR_BYTE(PORTA);
  72:	1b ba       	out	0x1b, r1	; 27
    byte i;

    while(1)
    {
        for (i = 0x01; i <= 0xFF; i++)
  74:	81 e0       	ldi	r24, 0x01	; 1
        {
            SET_BYTE(PORTA, i);
  76:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  78:	2f ef       	ldi	r18, 0xFF	; 255
  7a:	39 e6       	ldi	r19, 0x69	; 105
  7c:	98 e1       	ldi	r25, 0x18	; 24
  7e:	21 50       	subi	r18, 0x01	; 1
  80:	30 40       	sbci	r19, 0x00	; 0
  82:	90 40       	sbci	r25, 0x00	; 0
  84:	e1 f7       	brne	.-8      	; 0x7e <main+0x12>
  86:	00 c0       	rjmp	.+0      	; 0x88 <main+0x1c>
  88:	00 00       	nop
    CLR_BYTE(PORTA);
    byte i;

    while(1)
    {
        for (i = 0x01; i <= 0xFF; i++)
  8a:	8f 5f       	subi	r24, 0xFF	; 255
  8c:	f4 cf       	rjmp	.-24     	; 0x76 <main+0xa>

0000008e <_exit>:
  8e:	f8 94       	cli

00000090 <__stop_program>:
  90:	ff cf       	rjmp	.-2      	; 0x90 <__stop_program>
