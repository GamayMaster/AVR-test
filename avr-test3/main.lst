
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000d4  00000148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000005c4  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000cc1  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000013cd  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013e0  2**2
                  CONTENTS, READONLY
  6 .debug_info   000004e6  00000000  00000000  0000141c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004a3  00000000  00000000  00001902  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00001da5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  00001dbf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:



int main()
{
    SET_BYTE(DDRA, 0xFF);
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
    SET_BYTE(DDRB, 0x00);
  70:	17 ba       	out	0x17, r1	; 23
    CLR_BYTE(PORTA);
  72:	1b ba       	out	0x1b, r1	; 27
            {
                _delay_ms(20);
                if (READ_BIT(PINB, 0) == 1)
                {
                    _delay_ms(20);
                    CLR_BIT(PORTA, i-1);
  74:	61 e0       	ldi	r22, 0x01	; 1
  76:	70 e0       	ldi	r23, 0x00	; 0




int main()
{
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7c:	ef e3       	ldi	r30, 0x3F	; 63
  7e:	fc e9       	ldi	r31, 0x9C	; 156
  80:	31 97       	sbiw	r30, 0x01	; 1
  82:	f1 f7       	brne	.-4      	; 0x80 <main+0x14>
  84:	00 c0       	rjmp	.+0      	; 0x86 <main+0x1a>
  86:	00 00       	nop
        for (i = 0; i < 8; i++)
        {
            while (1)
            {
                _delay_ms(20);
                if (READ_BIT(PINB, 0) == 1)
  88:	b0 9b       	sbis	0x16, 0	; 22
  8a:	f8 cf       	rjmp	.-16     	; 0x7c <main+0x10>
  8c:	ef e3       	ldi	r30, 0x3F	; 63
  8e:	fc e9       	ldi	r31, 0x9C	; 156
  90:	31 97       	sbiw	r30, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <main+0x24>
  94:	00 c0       	rjmp	.+0      	; 0x96 <main+0x2a>
  96:	00 00       	nop
                {
                    _delay_ms(20);
                    CLR_BIT(PORTA, i-1);
  98:	3b b3       	in	r19, 0x1b	; 27
  9a:	ac 01       	movw	r20, r24
  9c:	41 50       	subi	r20, 0x01	; 1
  9e:	51 09       	sbc	r21, r1
  a0:	fb 01       	movw	r30, r22
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <main+0x3c>
  a4:	ee 0f       	add	r30, r30
  a6:	ff 1f       	adc	r31, r31
  a8:	4a 95       	dec	r20
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <main+0x38>
  ac:	2e 2f       	mov	r18, r30
  ae:	20 95       	com	r18
  b0:	23 23       	and	r18, r19
  b2:	2b bb       	out	0x1b, r18	; 27
                    break;
                }
            }
            SET_BIT(PORTA, i);
  b4:	4b b3       	in	r20, 0x1b	; 27
  b6:	9b 01       	movw	r18, r22
  b8:	08 2e       	mov	r0, r24
  ba:	01 c0       	rjmp	.+2      	; 0xbe <main+0x52>
  bc:	22 0f       	add	r18, r18
  be:	0a 94       	dec	r0
  c0:	ea f7       	brpl	.-6      	; 0xbc <main+0x50>
  c2:	24 2b       	or	r18, r20
  c4:	2b bb       	out	0x1b, r18	; 27
  c6:	01 96       	adiw	r24, 0x01	; 1
    CLR_BYTE(PORTA);
    byte i;

    while(1)
    {
        for (i = 0; i < 8; i++)
  c8:	88 30       	cpi	r24, 0x08	; 8
  ca:	91 05       	cpc	r25, r1
  cc:	b9 f6       	brne	.-82     	; 0x7c <main+0x10>
  ce:	d4 cf       	rjmp	.-88     	; 0x78 <main+0xc>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>
